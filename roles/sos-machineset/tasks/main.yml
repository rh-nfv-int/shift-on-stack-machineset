---

# Parse metadata.json to extract cluster-related data
- name: parse metadata.json produced by the cluster deployment
  set_fact:
    metadata: "{{ lookup('file', cluster_metadata_path) |from_json }}"

- name: extract variables
  set_fact:
    infrastructure_id: "{{ metadata.infraID }}"
    # The openshift-install default name for the glance image
    # Can be overriden if needed
    glance_image_name_or_location: "{{ metadata.infraID }}-rhcos"

# Query the OpenStack deployment to verify network information
# provided in the inventory.yaml file.  In addition, if the user
# only provided a network name, lookup the network and substitute
# the network UUID.  If no subnet UUID was provided, use the subnet
# id from the lookup.  Subnet insertion assumes only a SINGLE subnet
# on the referenced network.
#
- name: Gather/verify information about additional networks
  openstack.cloud.networks_info:
    name: "{{ item.network_UUID | default(item.name) }}"
    cloud: "{{ openstack_cloud }}"
  loop: "{{ additional_networks }}"
  register: net_info
  failed_when: net_info.openstack_networks|length == 0

# Rebuild additional networks information using queried data
- name: Build additionalNetworks with port lookups of UUID from additional_networks
  set_fact:
    additional_networks_mod: "{{ additional_networks_mod | default([]) + [ { 
                    'name_suffix' : net.name_suffix,
                    'network_UUID' : net_info.results[index].openstack_networks[0].id, 
                    'subnet_UUID' : net.subnet_UUID|default(net_info.results[index].openstack_networks[0].subnets[0]),
                    'vnic_type' : net.vnic_type|default(omit),
                    'driver' : net.driver|default(omit),
                    'tags' : net.tags
                    } ] }}"
  loop: "{{ additional_networks|flatten(levels=1) }}"
  loop_control:
    loop_var: net
    index_var: index

- name: lookup primary network
  openstack.cloud.networks_info:
    name: "{{ metadata.infraID }}-openshift"
    cloud: "{{ openstack_cloud }}"
  register: primary_info

- name: render template
  set_fact:
    primary_network_UUID: "{{ primary_info.openstack_networks[0].id }}"
    primary_subnet_UUID: "{{ primary_info.openstack_networks[0].subnets[0] }}"
    machineset: "{{ lookup('template', machineset_template_path) }}"

- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: "{{ build_output_dir }}"
    state: directory
    mode: "0755"

- name: write machineset file
  copy:
    content: "{{ machineset }}"
    dest: "{{build_output_dir}}/{{ metadata.infraID }}-{{ node_role }}-machineset.yaml"


# - name: Get a list of all pods from any namespace
#   kubernetes.core.k8s_info:
#     kind: Pod
#   register: pod_list

# - name: add service file to list
#   set_fact:
#     systemd:
#       - name: "{{ bind_service_name }}"
#         source: "{{ lookup('file', bind_service_file_path) }}"

# - name: convert comman separated to space separated networks
#   set_fact:
#     network_ids_parsed: "{{ network_ids.split(',') | join(' ') }}"

# - set_fact:
#     network_resource_map: "{{ network_resource_map|combine({ item.0 : item.1 }) }}"
#   with_together:
#     - "{{ network_ids.split(',') }}"
#     - "{{ resource_names.split(',') }}"

# - name: create contents list
#   set_fact:
#     contents:
#       - name: "{{ vfio_module_filename }}"
#         source: "{{ lookup('file', vfio_module_file_path) }}"
#       - name: "{{ exec_script_filename }}"
#         source: "{{ lookup('file', exec_script_file_path) }}"
#         mode: "0744"
#       - name: "{{ nwid_conf_filename }}"
#         source: "{{ lookup('template', nwid_conf_file_path) }}"

# - name: create mc config
#   k8s:
#     definition: "{{ lookup('template', mc_file_path) }}"

# # Change it to host-device plugin later
# - name: create device plugin for vhostuser
#   k8s:
#     definition: "{{ lookup('template', 'sriov-device-plugin-ds.yaml') }}"
